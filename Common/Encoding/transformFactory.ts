// The TransformFactory class is a wrapper around the model types in Azure Media Services to make code look a lot cleaner
// when creating custom encoding transforms.  The goal of the factory is to eliminate the need for declaring the odataType strings constantly 
// while working with the Typescript types that are generated by the Azure SDK auto generation code. 
// This helps to clean up your custom Transform code and keeps things neat.
// 
// NOTE: This is not complete list here, so feel free to add new codecs, formats, or preset types you would like to simplify in your code. 

import {
    AacAudio,
    H264Layer,
    H264Video,
    H265Video,
    H265Layer,
    Mp4Format,
    PngFormat,
    PngImage,
    PngLayer,
    JpgFormat,
    JpgLayer,
    JpgImage,
    StandardEncoderPreset,
    BuiltInStandardEncoderPreset
} from "@azure/arm-mediaservices"

export class TransformFactory {


    public createH264Video(video: Omit<H264Video, "odataType">): H264Video {
        return {
            odataType: "#Microsoft.Media.H264Video",
            ...video,
        }
    }

    public createH264Layer(layer: Omit<H264Layer, "odataType">): H264Layer {
        return {
            odataType: "#Microsoft.Media.H264Layer",
            ...layer,
        }
    }

    public createH265Video(video: Omit<H265Video, "odataType">): H265Video {
        return {
            odataType: "#Microsoft.Media.H265Video",
            ...video,
        }
    }

    public createH265Layer(layer: Omit<H265Layer, "odataType">): H265Layer {
        return {
            odataType: "#Microsoft.Media.H265Layer",
            ...layer,
        }
    }

    public createAACaudio(audio: Omit<AacAudio, "odataType">): AacAudio {
        return {
            odataType: "#Microsoft.Media.AacAudio",
            ...audio,
        }
    }

    public createPngImage(image: Omit<PngImage, "odataType">): PngImage {
        return {
            odataType: "#Microsoft.Media.PngImage",
            ...image,
        }
    }

    public createPngLayer(image: Omit<PngLayer, "odataType">): PngLayer {
        return {
            odataType: "#Microsoft.Media.PngLayer",
            ...image,
        }
    }

    public createPngFormat(pngFormat: Omit<PngFormat, "odataType">): PngFormat {
        return {
            odataType: "#Microsoft.Media.PngFormat",
            ...pngFormat,
        }
    }

    public createJpgImage(image: Omit<JpgImage, "odataType">): JpgImage {
        return {
            odataType: "#Microsoft.Media.JpgImage",
            ...image,
        }
    }
    
    public createJpgLayer(image: Omit<JpgLayer, "odataType">): JpgLayer {
        return {
            odataType: "#Microsoft.Media.JpgLayer",
            ...image,
        }
    }
    
    public createJpgFormat(format: Omit<JpgFormat, "odataType">): JpgFormat {
        return {
            odataType: "#Microsoft.Media.JpgFormat",
            ...format,
        }
    }

    public createStandardEncoderPreset(standardEncoder: Omit<StandardEncoderPreset, "odataType">): StandardEncoderPreset {
        return {
            odataType: "#Microsoft.Media.StandardEncoderPreset",
            ...standardEncoder,
        }
    }

    public createBuiltInStandardEncoderPreset(builtInStandardEncoder: Omit<BuiltInStandardEncoderPreset, "odataType">): BuiltInStandardEncoderPreset {
        return {
            odataType: "#Microsoft.Media.BuiltInStandardEncoderPreset",
            ...builtInStandardEncoder,
        }
    }

    public createMp4Format(mp4Format: Omit<Mp4Format, "odataType">): Mp4Format {
        return {
            odataType: "#Microsoft.Media.Mp4Format",
            ...mp4Format,
        }
    }


}